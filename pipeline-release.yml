---
groups:
- name: release
  jobs:
  - job-deploy-integration
  - job-deploy-staging
  - job-deploy-production

jobs:
- name: job-deploy-integration
  public: true
  serial: true
  plan:
  - aggregate:
    - {get: stemcell, trigger: false}
    - {get: release-redis, trigger: false}
    - get: pipeline
      resource: git-pipeline
      trigger: false
    - {get: integration-env-changes, trigger: true}
    - get: release-version
      trigger: false
      params: {bump: patch}
  - put: release-version
    params: {file: release-version/number}

  - task: make-manifest
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      run: {path: ./integration/bin/make_manifest_and_save.sh}
  - task: git-add
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - name: make-manifest
      run:
        path: ./make-manifest/integration/bin/git-add-stage-changes.sh
        args:
          - "[integration] Update manifest"
  - put: git-pipeline
    params:
      repository: git-add/make-manifest

  - put: resource-bosh-deployment-integration
    params:
      manifest: make-manifest/integration/manifest.yml
      releases:
        - release-redis/*.tgz
      stemcells:
        - stemcell/*.tgz

  - task: save-deployment-pipeline
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: release-version}
      - {name: make-manifest, path: .}
      - {name: release-redis}
      - {name: stemcell}
      run: {path: ./integration/bin/save_deployment_pipeline.sh}

  - put: s3-pipeline-release-candidate-templates
    params:
      from: save-deployment-pipeline/pipeline-assets-(.*).tgz

- name: job-deploy-integration-local
  public: true
  serial: true
  plan:
  - aggregate:
    - {get: staging-env-changes, trigger: false}
    - get: git-pipeline
      trigger: false
      # TODO comment the following when developing this job
      passed: [job-deploy-integration]
    - get: release-version
      passed: [job-deploy-integration]
      trigger: false

- name: job-deploy-staging
  public: true
  serial: true
  plan:
  - aggregate:
    - get: candidate-assets
      resource: s3-pipeline-release-candidate-templates
      passed: [job-deploy-integration]
      trigger: true
    - get: staging-env-changes
      trigger: true
    - get: pipeline
      resource: git-pipeline
      trigger: false
    - get: release-version
      passed: [job-deploy-integration]
      trigger: false
  - task: unpack-assets
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      - {name: candidate-assets}
      run:
        path: ./staging/bin/unpack_assets.sh
        args:
        - candidate-assets/pipeline-assets-*.tgz
        - staging
  - task: make-manifest
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: unpack-assets, path: .}
      run: {path: ./staging/bin/make_manifest_and_save.sh}
  - task: git-add
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - name: make-manifest
      run:
        path: ./make-manifest/staging/bin/git-add-stage-changes.sh
        args:
          - "[staging] Update manifest"
  - put: git-pipeline
    params:
      repository: git-add/make-manifest

  - put: resource-bosh-deployment-staging
    params:
      manifest: make-manifest/staging/manifest.yml
      releases: []
      stemcells: []

- name: job-deploy-production
  public: true
  serial: true
  plan:
  - aggregate:
    - get: candidate-assets
      resource: s3-pipeline-release-candidate-templates
      passed: [job-deploy-staging]
      trigger: true
    - get: production-env-changes
      trigger: true
    - get: pipeline
      resource: git-pipeline
      trigger: false
    - get: release-version
      passed: [job-deploy-staging]
      trigger: false
  - task: unpack-assets
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: pipeline, path: .}
      - {name: candidate-assets}
      run:
        path: ./production/bin/unpack_assets.sh
        args:
        - candidate-assets/pipeline-assets-*.tgz
        - production
  # - task: ls
  #   config:
  #     platform: linux
  #     image: docker:///ubuntu#14.04
  #     inputs:
  #     - {name: unpack-assets, path: .}
  #     run:
  #       path: ls
  #       args: ["-opR", "staging"]
  - task: make-manifest
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - {name: unpack-assets, path: .}
      run: {path: ./production/bin/make_manifest_and_save.sh}
  - task: git-add
    config:
      platform: linux
      image: {{docker-hub-task-image}}
      inputs:
      - name: make-manifest
      run:
        path: ./make-manifest/production/bin/git-add-stage-changes.sh
        args:
          - "[production] Update manifest"
  - put: git-pipeline
    params:
      repository: git-add/make-manifest

  - put: resource-bosh-deployment-production
    params:
      manifest: make-manifest/production/manifest.yml
      releases: []
      stemcells: []

resources:
- name: stemcell
  type: bosh-io-stemcell
  source:
    name: {{bosh-stemcell-name}}
    version: {{bosh-stemcell-version}}

- name: release-redis
  type: bosh-io-release
  source: {repository: cloudfoundry-community/redis-boshrelease}

- name: git-pipeline
  type: git
  source:
    uri: git@github.com:drnic/redis-bosh-pipeline.git
    branch: master
    private_key: {{github-private-key}}

- name: integration-env-changes
  type: git
  source:
    uri: git@github.com:drnic/redis-bosh-pipeline.git
    branch: master
    private_key: {{github-private-key}}
    paths: [integration/environment, integration/templates]

# staging-env-changes should only trigger on pipeline-specific changes
- name: staging-env-changes
  type: git
  source:
    uri: git@github.com:drnic/redis-bosh-pipeline.git
    branch: master
    private_key: {{github-private-key}}
    paths: [staging/environment]

# production-env-changes should only trigger on pipeline-specific changes
- name: production-env-changes
  type: git
  source:
    uri: git@github.com:drnic/redis-bosh-pipeline.git
    branch: master
    private_key: {{github-private-key}}
    paths: [production/environment]

- name: resource-bosh-deployment-integration
  type: bosh-deployment
  source:
    target: {{bosh-target}}
    username: {{bosh-username}}
    password: {{bosh-password}}
    deployment: integration
    ignore_ssl: true

- name: resource-bosh-deployment-staging
  type: bosh-deployment
  source:
    target: {{bosh-target}}
    username: {{bosh-username}}
    password: {{bosh-password}}
    deployment: staging
    ignore_ssl: true

- name: resource-bosh-deployment-production
  type: bosh-deployment
  source:
    target: {{bosh-target}}
    username: {{bosh-username}}
    password: {{bosh-password}}
    deployment: production
    ignore_ssl: true

- name: release-version
  type: semver
  source:
    bucket: {{aws-pipeline-bucket}}
    key: release-version
    initial_version: 0.1.0
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}
    region_name: us-east-1

- name: s3-pipeline-release-candidate-templates
  type: s3
  source:
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}
    region_name: {{aws-region-name}}
    bucket:  {{aws-pipeline-bucket}}
    private: true
    regexp: pipeline-assets-(.*).tgz
